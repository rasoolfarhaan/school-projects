# Setup
c-->from imp import reload
c-->import sparse_matrix
c-->reload(sparse_matrix)
c-->from sparse_matrix import Sparse_Matrix         # For use in repr
c-->from sparse_matrix import Sparse_Matrix as SM   # For use elsewhere
# Test init
c-->m = SM(2, 2)
==-->str(m)-->'2x2:[0  0\n     0  0]'
e-->len(m.matrix)-->0
c-->m = SM(2, 2, (0,0,5), (1,1,5))
==-->str(m)-->'2x2:[5  0\n     0  5]'
e-->len(m.matrix)-->2
c-->m = SM(2, 2, (0,0,5), (1,1,0))
==-->str(m)-->'2x2:[5  0\n     0  0]'
e-->len(m.matrix)-->1
^-->m = SM('a',2)-->AssertionError
^-->m = SM(2,1.5)-->AssertionError
^-->m = SM(0,0)-->AssertionError
^-->m = SM(-1,2)-->AssertionError
^-->m = SM(2,-1)-->AssertionError
^-->m = SM(2,2,(2,0,5))-->AssertionError
^-->m = SM(2,2,(0,0,1),(0,0,1))-->AssertionError
^-->m = SM(2,2,(0,0,1),(0,1,1),(1,0,1),(0,1,1))-->AssertionError
^-->m = SM(2,2,(0,0,'a'))-->AssertionError
^-->m = SM(2,2,(0,0,(0,1)))-->AssertionError
# Test size
c-->m = SM(3, 2)
e-->m.size()-->(3, 2)
c-->m = SM(2, 3)
e-->m.size()-->(2, 3)
c-->m = SM(10, 10)
e-->m.size()-->(10, 10)
# Test len
c-->m = Sparse_Matrix(2, 2)
e-->len(m)-->4
c-->m = Sparse_Matrix(3, 3)
e-->len(m)-->9
# Test bool
c-->m = Sparse_Matrix(2, 2)
e-->bool(m)-->False
c-->m = Sparse_Matrix(3, 3)
e-->bool(m)-->False
c-->m = Sparse_Matrix(2, 2, (0,0,1))
e-->bool(m)-->True
c-->m = Sparse_Matrix(3, 3, (1,1,1))
e-->bool(m)-->True
# Test repr
c-->m = Sparse_Matrix(3, 3, (0,0,1), (1,1,1), (2,2,1))
# m = Sparse_Matrix(3, 3, (0,0,1), (1,1,1), (2,2,1))
c-->print('        Showing repr (from previous line):',repr(m))
==-->m.rows-->eval(repr(m)).rows
==-->m.cols-->eval(repr(m)).cols
==-->m.matrix-->eval(repr(m)).matrix
c-->m = Sparse_Matrix(3, 2, (0,0,1), (1,0,1), (2,0,1))
# m = Sparse_Matrix(3, 2, (0,0,1), (1,0,1), (2,0,1))
c-->print('        Showing repr (from previous line):',repr(m))
==-->m.rows-->eval(repr(m)).rows
==-->m.cols-->eval(repr(m)).cols
==-->m.matrix-->eval(repr(m)).matrix
# Test getitem
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,1,0),(1,2,6),(2,0,7),(2,1,8),(2,2,0))
e-->m[0,0]-->0
e-->m[0,1]-->2
e-->m[0,2]-->3
e-->m[1,0]-->4
e-->m[1,1]-->0
e-->m[1,2]-->6
e-->m[2,0]-->7
e-->m[2,1]-->8
e-->m[2,2]-->0
^-->m[0]-->TypeError
^-->m[0,0,0]-->TypeError
^-->m['a',0]-->TypeError
^-->m[0,.5]-->TypeError
^-->m[-1,1]-->TypeError
^-->m[1,3]-->TypeError
# Test setitem
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,1,5),(1,2,6),(2,0,7),(2,1,8),(2,2,0))
c-->m[0,0] = 0
c-->m[0,1] = 0
c-->m[0,2] = 0
c-->m[1,1] = 5
c-->m[2,2] = 9
e-->m[0,0]-->0
e-->m[0,1]-->0
e-->m[0,2]-->0
e-->m[1,0]-->4
e-->m[1,1]-->5
e-->m[1,2]-->6
e-->m[2,0]-->7
e-->m[2,1]-->8
e-->m[2,2]-->9
e-->len(m.matrix)-->6
^-->m[0] = 0-->TypeError
^-->m[0,0,0] = 0-->TypeError
^-->m['a',0] = 0-->TypeError
^-->m[0,.5]  = 0-->TypeError
^-->m[-1,1]  = 0-->TypeError
^-->m[1,3]   = 0-->TypeError
^-->m[0,0]   = 'a'-->TypeError
^-->m[0,0]   = (0,1)-->TypeError
# Test delitem
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,1,0),(1,2,6),(2,0,7),(2,1,8),(2,2,0))
c-->del m[0,0]
c-->del m[0,1]
c-->del m[0,2]
e-->m[0,0]-->0
e-->m[0,1]-->0
e-->m[0,2]-->0
e-->m[1,0]-->4
e-->m[1,1]-->0
e-->m[1,2]-->6
e-->m[2,0]-->7
e-->m[2,1]-->8
e-->m[2,2]-->0
# Test row
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,2,6),(2,0,7),(2,1,8))
e-->m.row(0)-->(0, 2, 3)
e-->m.row(1)-->(4, 0, 6)
e-->m.row(2)-->(7, 8, 0)
^-->m.row('a')-->AssertionError
^-->m.row(-1)-->AssertionError
^-->m.row(3)-->AssertionError
# Test col
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,2,6),(2,0,7),(2,1,8))
e-->m.col(0)-->(0, 4, 7)
e-->m.col(1)-->(2, 0, 8)
e-->m.col(2)-->(3, 6, 0)
^-->m.col('a')-->AssertionError
^-->m.col(-1)-->AssertionError
^-->m.col(3)-->AssertionError
# Test details
c-->m = Sparse_Matrix(3,3, (0,0,1), (1,1,5), (2,2,1))
c-->d = m.details().split(' -> ')
e-->d[0]-->3x3
==-->eval(d[1])-->{(0, 0): 1, (1, 1): 5, (2, 2): 1}
==-->eval(d[2])-->((1, 0, 0), (0, 5, 0), (0, 0, 1))
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,2,6),(2,0,7),(2,1,8))
c-->d = m.details().split(' -> ')
e-->d[0]-->3x3
==-->eval(d[1])-->{(0, 1): 2, (1, 2): 6, (2, 0): 7, (1, 0): 4, (0, 2): 3, (2, 1): 8}
==-->eval(d[2])-->((0, 2, 3), (4, 0, 6), (7, 8, 0))
# Test call
c-->m = Sparse_Matrix(2, 2, (0,0,1),(0,1,1),(1,0,1),(1,1,1))
==-->str(m)-->'2x2:[1  1\n     1  1]'
c-->m(1,1)
==-->str(m)-->'1x1:[1]'
==-->m.matrix-->{(0,0):1}
c-->m = Sparse_Matrix(3, 3, (0,0,1), (1,1,1), (2,2,1))
==-->str(m)-->'3x3:[1  0  0\n     0  1  0\n     0  0  1]'
c-->m(2,2)
==-->str(m)-->'2x2:[1  0\n     0  1]'
==-->m.matrix-->{(0,0):1, (1,1):1}
c-->m(3,3)
==-->str(m)-->'3x3:[1  0  0\n     0  1  0\n     0  0  0]'
==-->m.matrix-->{(0,0):1, (1,1):1}
# Test iter
c-->m = SM(2, 2, (0,0,1),(0,1,3), (1,0,4), (1,1,2)) 
==-->[v for v in m]-->[(0,0,1), (1,1,2), (0,1,3), (1,0,4)]
c-->m = SM(3, 3, (0,0,5), (1,0,7), (1,1,1), (1,2,6), (2,2,4))
==-->[v for v in m]-->[(1,1,1), (2,2,4), (0,0,5), (1,2,6), (1,0,7)]
c-->m = SM(3, 3)
==-->[v for v in m]-->[]
# Test prefix +/- and abs
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,-3),(1,0,4),(1,2,-6),(2,0,7),(2,1,-8))
c-->m2 = +m
e-->m is m2-->False
==-->m2.matrix-->m.matrix
c-->m2 = -m
e-->m is m2-->False
==-->m2.size()-->m.size()
==-->len(m2.matrix)-->len(m.matrix)
e-->all(m2.matrix[rc]==-m.matrix[rc] for rc in m.matrix)-->True
c-->m2 = abs(m)
e-->m is m2-->False
==-->m2.size()-->m.size()
==-->len(m2.matrix)-->len(m.matrix)
e-->all(m2.matrix[rc]==abs(m2.matrix[rc]) for rc in m.matrix)-->True
# Test +
c-->m1 = SM(2,3, (0,0,1),  (0,1,2), (0,2,3),  (1,0,4), (1,1,5),  (1,2,6))
c-->m2 = SM(2,3, (0,0,-1), (0,1,2), (0,2,-3), (1,0,4), (1,1,-5), (1,2,1))
==-->str(m1+m2)-->'2x3:[0  4  0\n     8  0  7]'
e-->len((m1+m2).matrix)-->3
==-->str(m1+m1)-->'2x3:[ 2   4   6\n      8  10  12]'
==-->str(m1+m1+m1+m1)-->'2x3:[ 4   8  12\n     16  20  24]'
==-->str(1+m1)-->'2x3:[2  3  4\n     5  6  7]'
==-->str(m1+2)-->'2x3:[3  4  5\n     6  7  8]'
c-->m3 = SM(2,2)
^-->m1+m3-->AssertionError
^-->'a'+m1-->TypeError
^-->m1+'a'-->TypeError
# Test +
c-->m1 = SM(2,3, (0,0,1),  (0,1,2), (0,2,3),  (1,0,4), (1,1,5),  (1,2,6))
c-->m2 = SM(2,3, (0,0,-1), (0,1,2), (0,2,-3), (1,0,4), (1,1,-5), (1,2,1))
==-->str(m1-m2)-->'2x3:[ 2   0   6\n      0  10   5]'
e-->len((m1-m2).matrix)-->4
==-->str(m2-m1)-->'2x3:[ -2    0   -6\n       0  -10   -5]'
e-->len((m1-m2).matrix)-->4
==-->str(m1-m1)-->'2x3:[0  0  0\n     0  0  0]'
e-->len((m1-m1).matrix)-->0
==-->str(1-m1)-->'2x3:[ 0  -1  -2\n     -3  -4  -5]'
e-->len((1-m1).matrix)-->5
==-->str(m1-2)-->'2x3:[-1   0   1\n      2   3   4]'
e-->len((m1-2).matrix)-->5
c-->m3 = SM(2,2)
^-->m1-m3-->AssertionError
^-->'a'-m1-->TypeError
^-->m1-'a'-->TypeError
# Test *
c-->m1 = SM(2,3,(0,0,1),(0,1,2),(0,2,1),(1,0,2),(1,1,1),(1,2,2))
c-->m2 = SM(3,2,(0,0,0),(0,1,1),(1,0,2),(1,1,0),(2,0,1),(2,1,1))
==-->str(m1*m2)-->'2x2:[5  2\n     4  4]'
==-->str(m2*m1)-->'3x3:[2  1  2\n     2  4  2\n     3  3  3]'
==-->str(m2*2)-->'3x2:[0  2\n     4  0\n     2  2]'
==-->str(2*m2)-->'3x2:[0  2\n     4  0\n     2  2]'
==-->str(m2*0)-->'3x2:[0  0\n     0  0\n     0  0]'
e-->len((m2*0).matrix)-->0
==-->str(0*m2)-->'3x2:[0  0\n     0  0\n     0  0]'
e-->len((0*m2).matrix)-->0
^-->m1*m1-->AssertionError
^-->m2*m2-->AssertionError
^-->'1'*m2-->TypeError
^-->m2*'1'-->TypeError
# Test **
c-->m = Sparse_Matrix(3,3, (0,0,1), (1,1,5), (2,2,1))
==-->str(m**1)-->'3x3:[1  0  0\n     0  5  0\n     0  0  1]'
==-->str(m**2)-->'3x3:[ 1   0   0\n      0  25   0\n      0   0   1]'
==-->str(m**10)-->'3x3:[      1        0        0\n           0  9765625        0\n           0        0        1]'
^-->m**'a'-->TypeError
^-->m**m-->TypeError
^-->m**0-->AssertionError
^-->m**-1-->AssertionError
c-->m = Sparse_Matrix(3,2)
^-->m**2-->AssertionError
# Test ==/!=
c-->m1 = SM(2,2, (0,0,1),(1,1,1))                            # 2 1s, 2 0s
c-->m2 = SM(2,2)                                             # All(4) 0s
c-->m3 = SM(2,2, (0,0,1),(1,1,1))                            # 2 1s, 2 0x (same as m1)
c-->m4 = SM(2,2, (0,0,1), (0,1,1), (1,0,1), (1,1,1))         # All(4) 1s
c-->m5 = SM(1,1)                                             # Al(1) 0s
c-->m6 = SM(1,1 , (0,0,1))                                   # All(1) 1s
e-->m1 == m2-->False
e-->m1 == m3-->True
e-->m1 == m4-->False
e-->m1 == m5-->False
e-->m1 == m6-->False
e-->m1 == 0-->False
e-->m1 == 1-->False
e-->m2 == 0-->True
e-->m3 == 1-->False
e-->m4 == 0-->False
e-->m4 == 1-->True
e-->0 == m1-->False
e-->1 == m1-->False
e-->0 == m2-->True
e-->1 == m3-->False
e-->0 == m4-->False
e-->1 == m4-->True
e-->'a' == m1-->False
e-->m1 == 'a'-->False
e-->m1 != m2-->True
e-->m1 != m3-->False
e-->m1 != m4-->True
e-->m1 != m5-->True
e-->m1 != m6-->True
e-->m1 != 0-->True
e-->m1 != 1-->True
e-->m2 != 0-->False
e-->m3 != 1-->True
e-->m4 != 0-->True
e-->m4 != 1-->False
e-->0 != m1-->True
e-->1 != m1-->True
e-->0 != m2-->False
e-->1 != m3-->True
e-->0 != m4-->True
e-->1 != m4-->False
e-->'a' != m1-->True
e-->m1 != 'a'-->True
# Test setting attributes
c-->m = Sparse_Matrix(3,3, (0,0,1), (1,1,5), (2,2,1))
^-->m.a = 'a'-->AssertionError
^-->m.rows = 1-->AssertionError
^-->m.cols = 5-->AssertionError
^-->m.matrix = {}-->AssertionError